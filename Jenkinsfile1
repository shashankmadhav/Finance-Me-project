node{

    def mavenHome
    def mavenCMD
    def docker
    def dockerCMD
    def tagName
    
    stage('prepare enviroment'){
        echo 'initialize all the variables'
        mavenHome = tool name: 'maven' , type: 'maven'
        mavenCMD = "${mavenHome}/bin/mvn"
        docker = tool name: 'docker' , type: 'org.jenkinsci.plugins.docker.commons.tools.DockerTool'
        dockerCMD = "${docker}/bin/docker"
        tagName="3.0"
}
    stage('Code CheckOut'){
        git 'https://github.com/shashankmadhav/Finance-Me-project.git'
    }
     stage('Build the Application'){
        echo "Cleaning... Compiling...Testing... Packaging..."
        //sh 'mvn clean package'
        sh "${mavenCMD} clean package"        
    }
    
    stage('publish test reports'){
        publishHTML([allowMissing: false, alwaysLinkToLastBuild: false, keepAll: false, reportDir: '/var/lib/jenkins/workspace/Capstone-Project-Live-Demo/target/surefire-reports', reportFiles: 'index.html', reportName: 'HTML Report', reportTitles: '', useWrapperFileDirectly: true])
    }
    stage('Code Build'){
        sh 'mvn clean package'
    }
     stage("Image Prune"){
         sh "docker image prune -a -f"
    }
    stage('Containerize the application'){
        echo 'Creating Docker image'
        sh "${dockerCMD} build -t shashankmadhav/finance-me:${tagName} ."
    }
    
    stage('Pushing it ot the DockerHub'){
        echo 'Pushing the docker image to DockerHub'
        withCredentials([string(credentialsId: 'dockerHubPassword', variable: 'dockerHubPassword')]) {
        sh "${dockerCMD} login -u shashankmadhav -p ${dockerHubPassword}"
        sh "${dockerCMD} push shashankmadhav/finance-me:${tagName}"
            
        }
    }
    stage('Provisioning Test-Server using tf'){
        
        withCredentials([[
            $class: 'AmazonWebServicesCredentialsBinding',
            credentialsId: 'aws-creden',
            accessKeyVariable: 'AWS_ACCESS_KEY_ID',
            secretKeyVariable: 'AWS_SECRET_ACCESS_KEY']]){
        sh 'terraform init'
        sh 'terraform validate'
        sh 'terraform plan'
        sh 'terraform apply --auto-approve'
        }
    }
    
    stage('configuring test server & deploy our finance-me app'){
        ansiblePlaybook become: true, credentialsId: 'ssh-keys-ansible', disableHostKeyChecking: true, installation: 'Ansible', inventory: 'hosts', playbook: 'config-test-server'
    }
     
    
}
